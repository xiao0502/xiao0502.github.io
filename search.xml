<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[前端面试html篇]]></title>
      <url>/2018/02/05/interviewForHtml/</url>
      <content type="html"><![CDATA[<h3 id="网页从开始请求到最终显示的完整过程"><a href="#网页从开始请求到最终显示的完整过程" class="headerlink" title="网页从开始请求到最终显示的完整过程"></a>网页从开始请求到最终显示的完整过程</h3><blockquote>
<p>从浏览器地址栏输入网址，到呈现我们想要的内容，可能只需要0.1秒钟甚至更短的时间，但是其中经历了什么呢？</p>
</blockquote>
<ol>
<li>在浏览器中 <code>输入网址</code> ；</li>
<li>通过向 <code>本地域名服务器</code> 、 <code>根域名服务器</code> 、 <code>顶级域名服务器</code> 等一系列DNS服务器发送请求，<br>获取网址对应的 <code>服务器IP地址</code>；</li>
<li>与服务器建立 <code>TCP</code>（传输控制协议）连接；</li>
<li>客户端（浏览器）向服务器（即IP地址）发送 <code>HTTP请求</code> ；</li>
<li>服务器响应请求后返回 <code>指定url的数据</code> ，如果有重定向的话，则跳转到重定向的url地址；</li>
<li>浏览器下载返回的数据后 <code>解析并渲染排版</code> ，显示基础页面；</li>
<li>分析页面中的超链接并显示，重复以上过程，直至 <code>完成全部数据显示</code> ；</li>
</ol>
<blockquote>
<p>提到TCP协议，不得不说到TCP协议中的经典的 <code>三次握手</code> 和 <code>四次挥手</code> ；</p>
</blockquote>
<pre><code>三次握手
一次：客户端向服务器发送连接请求报文；
二次：服务器接受连接报文回复ACK报文，并为这次连接分配相关资源；
三次：客户端接收到服务器的ACK报文，也向服务器发送报文，并分配资源；
</code></pre><p>用通俗的话理解上面这段话的意思就是：</p>
<p><code>张三</code> 和 <code>李四</code> 在街上碰面，张三问李四： “你吃了吗？”<br>李四要是听不懂张三的话不回答，或者回答的不是吃了没之类的问题，表示连接失败；</p>
<p>李四回答张三： “吃了，你吃了吗？”<br>同样的，张三要是听不懂李四的话不回答，或者回答的不是吃了没之类的问题，连接失败；</p>
<p>张三回答李四： “我也吃了，回头见哈~”<br>此时才算是张三和李四才可以畅聊，此时他们经过了 <code>三次握手询问</code> 。</p>
<pre><code>四次挥手
一次：客户端（服务器也可以主动发起中断连接）向服务器端发送中断连接请求（FIN报文）；
二次：服务器发送一个ACK报文给客户端并告诉客户端，服务器收到中断连接请求，请客户端等待；
三次：服务器发送FIN报文给客户端，并中断连接；
四次：客户端想服务端发送ACK报文，等待2MSL后没有回复，证明服务端已中断，客户端再中断连接；
</code></pre><p><code>ACK报文</code> : 确认标注； <code>FIN报文</code> ：结束标注；两者都是属于TCP传输控制协议中的几种状态；</p>
<p>这里就可以简单的回答下关于TCP协议中的两个常见问题：</p>
<ol>
<li><p>为什么连接的时候是三次握手，关闭的时候却是四次握手？<br>握手时候，服务器收到客户端连接请求报文后，可以应答（ACK）后并同步（SYN），<br>但是中断连接则不行，数据传输是异步，所以服务器收到FIN报文后，不会立刻关闭，只能等数据传输完毕；</p>
</li>
<li><p>为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？<br>客户端最后想服务器发送ACK报文后进入TIME_WAIT状态，经过2MSL，可以是本次连接内的所有报文段消失，下个新的链接的请求报文可以重新开始；</p>
</li>
</ol>
<h3 id="初窥浏览器渲染过程"><a href="#初窥浏览器渲染过程" class="headerlink" title="初窥浏览器渲染过程"></a>初窥浏览器渲染过程</h3><blockquote>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端面试 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[找个地儿，写点东西]]></title>
      <url>/2018/02/04/firstArticle/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一直想找个地儿好好写点东西，之前买过域名和服务器，准备好好弄个个站搞点事情，无奈设计排版编辑等一系列老大难问题摆在面前，一直没时间去好好落到实地。年关将至，这一年感触多,收获也有点，抽点时间出来，在<code>github个站</code>、<code>hexo静态站点生成器</code>、<code>next主题</code>等一系列的智能化工具的帮助之下，个站算是简单的成了，有个地儿好好记录记录，吐槽吐槽，抒发抒发。</p>
]]></content>
      
        <categories>
            
            <category> 开篇 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[十分钟建站利器—github+hexo+next]]></title>
      <url>/2018/02/02/buildStation/</url>
      <content type="html"><![CDATA[<blockquote>
<p> 关于 <code>hexo</code> 建站主题 <code>next</code> 的个性化技巧，随便百度谷歌没有上百也有大几十篇，<br>再继续介绍next的个性化技巧，就显得有点无趣了。这里主要给大家分享一个已经配置好的<br>了next主题文件和如何使用的说明，毕竟大多数人利用github建立个站都是为了<code>写点东西</code>。</p>
</blockquote>
<h3 id="新建github个站"><a href="#新建github个站" class="headerlink" title="新建github个站"></a>新建github个站</h3><p>注册github账号后，新建一个包含与账户名相同的仓库，如下：</p>
<p><img class="demoImg" src="http://p3idd1hk8.bkt.clouddn.com/store.png"></p>
<p>建好仓库后，可以用仓库名字去访问自己的 <code>github个站</code> ，可以随便丢个index.html进去，<br>就能看到自己的主页了。</p>
<h3 id="hexo模板建站步骤"><a href="#hexo模板建站步骤" class="headerlink" title="hexo模板建站步骤"></a>hexo模板建站步骤</h3><ol>
<li>全局安装hexo-cli脚手架<br><code>npm install hexo-cli -g</code></li>
<li>初始化建站模板<br><code>hexo init yourBlogName</code></li>
<li><p>进入项目并安装依赖<br><code>cd yourBlogName &amp;&amp; npm install</code></p>
<p> 新建完成后，会生成如下目录：</p>
<pre><code>├── _config.yml // 项目配置文件
├── package.json
├── scaffolds
├── source // 开发目录
|   └── _posts
└── themes // 主题目录
</code></pre></li>
</ol>
<p>hexo主要命令行介绍</p>
<p>清除缓存：<code>hexo clean</code><br>代码编译：<code>hexo g</code><br>代码开发：<code>hexo s</code><br>发布上线：<code>hexo d</code></p>
<h3 id="下载next主题并修改配置文件"><a href="#下载next主题并修改配置文件" class="headerlink" title="下载next主题并修改配置文件"></a>下载next主题并修改配置文件</h3><p>我根据自己的喜欢简单，对hexo的next主题做了些基础的修改，下载地址：<a href="http://p3idd1hk8.bkt.clouddn.com/next.zip" target="_blank" rel="noopener">next主题下载</a><br>hexo建站后默认的主题是 <code>landscape</code>，将下载后的文件解压后，放在themes文件夹，<br>修改配置文件 <code>_config.yml</code> 如下几点：</p>
<pre><code>1. 修改首页默认地址
    url: https://xiao0502.github.io/ 
2. git代码上传配置
    deploy:
      type: git
      repo: https://github.com/xiao0502/xiao0502.github.io.git 
      branch: master
3. 主题换成next
    theme: next 
</code></pre><h3 id="上线三部曲"><a href="#上线三部曲" class="headerlink" title="上线三部曲"></a>上线三部曲</h3><p>上线三部曲， <code>hexo clean</code>  <code>hexo g</code>  <code>hexo d</code> , 搞定！</p>
]]></content>
      
        <categories>
            
            <category> next个性化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> next </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
