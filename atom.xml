<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FeXiao&#39;s Blog</title>
  
  <subtitle>Fe Immortal</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiao0502.github.io/"/>
  <updated>2018-02-06T04:39:30.569Z</updated>
  <id>https://xiao0502.github.io/</id>
  
  <author>
    <name>FeXiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初窥浏览器渲染过程和原理</title>
    <link href="https://xiao0502.github.io/2018/02/06/bowserPaint/"/>
    <id>https://xiao0502.github.io/2018/02/06/bowserPaint/</id>
    <published>2018-02-06T04:12:42.000Z</published>
    <updated>2018-02-06T04:39:30.569Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>了解浏览器的渲染过程和原理，有利于我们前端人员实现一些项目的具体优化方案，例如首屏渲染、按需加载等等；</p></blockquote><p>上一张图，先看为敬！</p><p><img class="demoImg" src="http://p3idd1hk8.bkt.clouddn.com/renderTree.jpg"></p><p>首先了解一个词，<code>关键渲染路径</code>，即与当前用户操作有关的内容，<br>最直接的体现就是<code>首屏渲染</code>。了解浏览器的渲染过程，<br>大部分就是为了优化关键渲染路径，避免长时间的白屏，提升用户体验；</p><p>上个知识点《网页从开始请求到最终显示的完整过程》中说到过浏览器请求加载渲染一个页面的基本过程，精简下来，就是五个步骤：</p><pre><code>1. DNS查询2. TCP连接3. HTTP请求4. 服务器响应5. 浏览器渲染</code></pre><p>这个知识点主要说第五个步骤，<code>浏览器渲染</code>，细分下来，也可以是补个步骤：</p><pre><code>1. 处理HTML构建DOM树2. 处理CSS构建CSSOM树3. 将DOM和CSSOM合并成一个render（渲染树）4. 将render布局，计算每个节点的几何信息（Layout）5. 将节点绘制在屏幕上（Paint）</code></pre><p>要知道，上述的五个步骤不是一次性顺序进行，一旦DOM和CSSOM被修改，<br>就会重新计算并渲染（Repaint），<br>而在实际开发中，CSS和JS都是会经常修改DOM和CSSOM的。</p><pre><code>CSS和JS都会阻塞DOM加载，一旦发生阻塞，解析器会停止构建DOM。CSS阻塞时，浏览器会延迟JS脚本执行和DOM构建，知道CSSOM构建完毕。JS阻塞时，DOM暂停构建，直至脚本执行完毕。</code></pre><p>所以在实际开发中，有<code>两个原则</code>：</p><pre><code>1. CSS优先： CSS优先于JS资源2. JS尽量减少对DOM构建的影响</code></pre><p>这里对比下Repaint和Reflow,前者是元素的改变不影响布局，后者是布局被影响，渲染成本高</p><p>有可能<code>触发Reflow的行为</code>：</p><pre><code>1. 增删改DOM节点2. 增删class属性值3. 元素尺寸大小4. 文本内容大小5. 浏览器窗口改变大小或者拖动6. 动画效果7. 伪类</code></pre><p>在上述行为中，浏览器不是每次Reflow或者Repaint就立即执行，而是积累到一定时候，就会Reflow或者Repaint，<br>当然有些行为，比如改变浏览器窗口大小是立即执行Reflow或者Repaint的。</p><p>说了上述些后，可以谈谈优化浏览器渲染过程的<code>具体实现</code>了。</p><ol><li>指定文档编码 <meta charset="utf-8"></li><li>CSS放在 <code>&lt;head&gt;</code> 里面， js放在 <code>&lt;/body&gt;</code> 结束标签之前</li><li>不要逐条修改CSS样式，提前定义好class样式，<code>对css进行操作</code></li><li>CSS的引入利用 <code>媒体查询</code> ，接触对渲染的阻塞   </li><li>JS的引入适当添加defer或者async,虽然都是 <code>异步加载</code> ，但是前者有序，后者无序</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;了解浏览器的渲染过程和原理，有利于我们前端人员实现一些项目的具体优化方案，例如首屏渲染、按需加载等等；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上一张图，先看为敬！&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;demoImg&quot; src=&quot;http://
      
    
    </summary>
    
    
      <category term="浏览器渲染" scheme="https://xiao0502.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>网页从开始请求到最终显示的完整过程</title>
    <link href="https://xiao0502.github.io/2018/02/05/urlResolve/"/>
    <id>https://xiao0502.github.io/2018/02/05/urlResolve/</id>
    <published>2018-02-05T03:38:23.000Z</published>
    <updated>2018-02-06T04:46:39.608Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从浏览器地址栏输入网址，到呈现我们想要的内容，可能只需要0.1秒钟甚至更短的时间，但是其中经历了什么呢？</p></blockquote><ol><li>在浏览器中 <code>输入网址</code> ；</li><li>通过向 <code>本地域名服务器</code> 、 <code>根域名服务器</code> 、 <code>顶级域名服务器</code> 等一系列DNS服务器发送请求，<br>获取网址对应的 <code>服务器IP地址</code>；</li><li>与服务器建立 <code>TCP</code>（传输控制协议）连接；</li><li>客户端（浏览器）向服务器（即IP地址）发送 <code>HTTP请求</code> ；</li><li>服务器响应请求后返回 <code>指定url的数据</code> ，如果有重定向的话，则跳转到重定向的url地址；</li><li>浏览器下载返回的数据后 <code>解析并渲染排版</code> ，显示基础页面；</li><li>分析页面中的超链接并显示，重复以上过程，直至 <code>完成全部数据显示</code> ；</li></ol><blockquote><p>提到TCP协议，不得不说到TCP协议中的经典的 <code>三次握手</code> 和 <code>四次挥手</code> ；</p></blockquote><pre><code>三次握手一次：客户端向服务器发送连接请求报文；二次：服务器接受连接报文回复ACK报文，并为这次连接分配相关资源；三次：客户端接收到服务器的ACK报文，也向服务器发送报文，并分配资源；</code></pre><p><img class="demoImg" src="http://p3idd1hk8.bkt.clouddn.com/tcp-1.png"></p><p>用通俗的话理解上面这段话的意思就是：</p><p><code>张三</code> 和 <code>李四</code> 在街上碰面，张三问李四： “你吃了吗？”<br>李四要是听不懂张三的话不回答，或者回答的不是吃了没之类的问题，表示连接失败；</p><p>李四回答张三： “吃了，你吃了吗？”<br>同样的，张三要是听不懂李四的话不回答，或者回答的不是吃了没之类的问题，连接失败；</p><p>张三回答李四： “我也吃了，回头见哈~”<br>此时才算是张三和李四才可以畅聊，此时他们经过了 <code>三次握手询问</code> 。</p><pre><code>四次挥手一次：客户端（服务器也可以主动发起中断连接）向服务器端发送中断连接请求（FIN报文）；二次：服务器发送一个ACK报文给客户端并告诉客户端，服务器收到中断连接请求，请客户端等待；三次：服务器发送FIN报文给客户端，并中断连接；四次：客户端想服务端发送ACK报文，等待2MSL后没有回复，证明服务端已中断，客户端再中断连接；</code></pre><p><img class="demoImg" src="http://p3idd1hk8.bkt.clouddn.com/tcp-2.png"></p><p><code>ACK报文</code> : 确认标注； <code>FIN报文</code> ：结束标注；两者都是属于TCP传输控制协议中的几种状态；</p><p>这里就可以简单的回答下关于TCP协议中的两个常见问题：</p><ol><li><p>为什么连接的时候是三次握手，关闭的时候却是四次握手？<br>握手时候，服务器收到客户端连接请求报文后，可以应答（ACK）后并同步（SYN），<br>但是中断连接则不行，数据传输是异步，所以服务器收到FIN报文后，不会立刻关闭，只能等数据传输完毕；</p></li><li><p>为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？<br>客户端最后想服务器发送ACK报文后进入TIME_WAIT状态，经过2MSL，可以是本次连接内的所有报文段消失，下个新的链接的请求报文可以重新开始；</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;从浏览器地址栏输入网址，到呈现我们想要的内容，可能只需要0.1秒钟甚至更短的时间，但是其中经历了什么呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在浏览器中 &lt;code&gt;输入网址&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;通过向 &lt;code
      
    
    </summary>
    
      <category term="html" scheme="https://xiao0502.github.io/categories/html/"/>
    
    
      <category term="URL到页面渲染" scheme="https://xiao0502.github.io/tags/URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>找个地儿，写点东西</title>
    <link href="https://xiao0502.github.io/2018/02/04/firstArticle/"/>
    <id>https://xiao0502.github.io/2018/02/04/firstArticle/</id>
    <published>2018-02-04T14:28:23.273Z</published>
    <updated>2018-02-04T14:28:23.274Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一直想找个地儿好好写点东西，之前买过域名和服务器，准备好好弄个个站搞点事情，无奈设计排版编辑等一系列老大难问题摆在面前，一直没时间去好好落到实地。年关将至，这一年感触多,收获也有点，抽点时间出来，在<code>github个站</code>、<code>hexo静态站点生成器</code>、<code>next主题</code>等一系列的智能化工具的帮助之下，个站算是简单的成了，有个地儿好好记录记录，吐槽吐槽，抒发抒发。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;一直想找个地儿好好写点东西，之前买过域名和服务器，准备好好弄个个站搞点事情，无奈设计排版编辑等一系列老大难问题摆在面前，一直没时间去好好落到实地。年关将至，这一年感触多,收获也有点，抽点时间出来，在&lt;c
      
    
    </summary>
    
      <category term="开篇" scheme="https://xiao0502.github.io/categories/%E5%BC%80%E7%AF%87/"/>
    
    
  </entry>
  
  <entry>
    <title>十分钟建站利器—github+hexo+next</title>
    <link href="https://xiao0502.github.io/2018/02/02/buildStation/"/>
    <id>https://xiao0502.github.io/2018/02/02/buildStation/</id>
    <published>2018-02-02T07:40:09.000Z</published>
    <updated>2018-02-06T02:26:01.255Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 关于 <code>hexo</code> 建站主题 <code>next</code> 的个性化技巧，随便百度谷歌没有上百也有大几十篇，<br>再继续介绍next的个性化技巧，就显得有点无趣了。这里主要给大家分享一个已经配置好的<br>了next主题文件和如何使用的说明，毕竟大多数人利用github建立个站都是为了<code>写点东西</code>。</p></blockquote><h2 id="新建github个站"><a href="#新建github个站" class="headerlink" title="新建github个站"></a>新建github个站</h2><p>注册github账号后，新建一个包含与账户名相同的仓库，如下：</p><p><img class="demoImg" src="http://p3idd1hk8.bkt.clouddn.com/store.png"></p><p>建好仓库后，可以用仓库名字去访问自己的 <code>github个站</code> ，可以随便丢个index.html进去，<br>就能看到自己的主页了。</p><h2 id="hexo模板建站步骤"><a href="#hexo模板建站步骤" class="headerlink" title="hexo模板建站步骤"></a>hexo模板建站步骤</h2><ol><li>全局安装hexo-cli脚手架<br><code>npm install hexo-cli -g</code></li><li>初始化建站模板<br><code>hexo init yourBlogName</code></li><li><p>进入项目并安装依赖<br><code>cd yourBlogName &amp;&amp; npm install</code></p><p> 新建完成后，会生成如下目录：</p><pre><code>├── _config.yml // 项目配置文件├── package.json├── scaffolds├── source // 开发目录|   └── _posts└── themes // 主题目录</code></pre></li></ol><p>hexo主要命令行介绍</p><p>清除缓存：<code>hexo clean</code><br>代码编译：<code>hexo g</code><br>代码开发：<code>hexo s</code><br>发布上线：<code>hexo d</code></p><h2 id="下载next主题并修改配置文件"><a href="#下载next主题并修改配置文件" class="headerlink" title="下载next主题并修改配置文件"></a>下载next主题并修改配置文件</h2><p>我根据自己的喜欢简单，对hexo的next主题做了些基础的修改，下载地址：<a href="http://p3idd1hk8.bkt.clouddn.com/next.zip" target="_blank" rel="noopener">next主题下载</a><br>hexo建站后默认的主题是 <code>landscape</code>，将下载后的文件解压后，放在themes文件夹，<br>修改配置文件 <code>_config.yml</code> 如下几点：</p><pre><code>1. 修改首页默认地址    url: https://xiao0502.github.io/ 2. git代码上传配置    deploy:      type: git      repo: https://github.com/xiao0502/xiao0502.github.io.git       branch: master3. 主题换成next    theme: next </code></pre><h2 id="上线三部曲"><a href="#上线三部曲" class="headerlink" title="上线三部曲"></a>上线三部曲</h2><p>上线三部曲， <code>hexo clean</code>  <code>hexo g</code>  <code>hexo d</code> , 搞定！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 关于 &lt;code&gt;hexo&lt;/code&gt; 建站主题 &lt;code&gt;next&lt;/code&gt; 的个性化技巧，随便百度谷歌没有上百也有大几十篇，&lt;br&gt;再继续介绍next的个性化技巧，就显得有点无趣了。这里主要给大家分享一个已经配置好的&lt;br&gt;了next
      
    
    </summary>
    
      <category term="next个性化" scheme="https://xiao0502.github.io/categories/next%E4%B8%AA%E6%80%A7%E5%8C%96/"/>
    
    
      <category term="next" scheme="https://xiao0502.github.io/tags/next/"/>
    
  </entry>
  
</feed>
